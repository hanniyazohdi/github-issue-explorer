{"ast":null,"code":"var _jsxFileName = \"/Users/hanniyazohdi/React-Frontend-Workshop/src/components/QueriedDataContent.jsx\";\nimport { Typography, Card, GridList, GridListTile, CardContent } from \"@material-ui/core\";\n/**\n * This is the component for the queried data portion of our application.\n * It contains a grid of cards which each contain a different issue found in the repo specified.\n *\n * We use a map function to iterate and apply properties/methods to each element of the array.\n * Remember that queriedData is a json! We have an array of jsons within one larger json.\n * Each entry in the json response is a single issue.\n *\n * We iterate through the json array and for each component we create a GridListTile, Card, and CardContent while extracting the properties!\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const QueriedDataContent = _ref => {\n  let {\n    queriedData\n  } = _ref;\n  return (\n    /*#__PURE__*/\n    // GridList is the parent component wrapping the components within.\n    // We use map function to create the components for each entry.\n    _jsxDEV(GridList, {\n      cols: 3,\n      style: {\n        marginLeft: \"10px\",\n        marginRight: \"10px\"\n      },\n      children: queriedData.map((mapDatum, index) => {\n        return /*#__PURE__*/_jsxDEV(GridListTile, {\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            style: {\n              height: \"200px\",\n              overflowY: \"scroll\",\n              background: \"#ebf7ff\"\n            },\n            children: /*#__PURE__*/_jsxDEV(CardContent, {\n              children: [mapDatum.pull_request && mapDatum.state !== \"closed\" || mapDatum.state === \"open\" && mapDatum.pull_request ? /*#__PURE__*/_jsxDEV(\"span\", {\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  children: \"Pull Request\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 40,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 39,\n                columnNumber: 19\n              }, this) : // In the case it is not pull request, (first statement is false), we check if the state is closed.\n              // If it is closed, we can mark it as a closed issue\n              mapDatum.state === \"closed\" ? /*#__PURE__*/_jsxDEV(\"span\", {\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  children: \" Closed\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 46,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 45,\n                columnNumber: 19\n              }, this) :\n              /*#__PURE__*/\n              // else: it means it is neither a pull request or closed issue, so we can just call it an issue.\n              _jsxDEV(\"span\", {\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  children: \" Issue\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 51,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                children: /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 64,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 13\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }, this)\n  );\n};\n_c = QueriedDataContent;\n\nvar _c;\n\n$RefreshReg$(_c, \"QueriedDataContent\");","map":{"version":3,"sources":["/Users/hanniyazohdi/React-Frontend-Workshop/src/components/QueriedDataContent.jsx"],"names":["Typography","Card","GridList","GridListTile","CardContent","QueriedDataContent","queriedData","marginLeft","marginRight","map","mapDatum","index","height","overflowY","background","pull_request","state"],"mappings":";AAAA,SACEA,UADF,EAEEC,IAFF,EAGEC,QAHF,EAIEC,YAJF,EAKEC,WALF,QAMO,mBANP;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAMC,kBAAkB,GAAG,QAAqB;AAAA,MAApB;AAAEC,IAAAA;AAAF,GAAoB;AACrD;AAAA;AACE;AACA;AACA,YAAC,QAAD;AAAU,MAAA,IAAI,EAAE,CAAhB;AAAmB,MAAA,KAAK,EAAE;AAAEC,QAAAA,UAAU,EAAE,MAAd;AAAsBC,QAAAA,WAAW,EAAE;AAAnC,OAA1B;AAAA,gBACGF,WAAW,CAACG,GAAZ,CAAgB,CAACC,QAAD,EAAWC,KAAX,KAAqB;AACpC,4BACE,QAAC,YAAD;AAAA,iCACE,QAAC,IAAD;AACE,YAAA,KAAK,EAAE;AACLC,cAAAA,MAAM,EAAE,OADH;AAELC,cAAAA,SAAS,EAAE,QAFN;AAGLC,cAAAA,UAAU,EAAE;AAHP,aADT;AAAA,mCAOE,QAAC,WAAD;AAAA,yBAGIJ,QAAQ,CAACK,YAAT,IAAyBL,QAAQ,CAACM,KAAT,KAAmB,QAA7C,IACAN,QAAQ,CAACM,KAAT,KAAmB,MAAnB,IAA6BN,QAAQ,CAACK,YADtC,gBAEC;AAAA,uCACE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBAFD,GAKG;AACJ;AACAL,cAAAA,QAAQ,CAACM,KAAT,KAAmB,QAAnB,gBACE;AAAA,uCACE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBADF;AAAA;AAKE;AACA;AAAA,uCACE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBAhBJ,eA4BE,QAAC,UAAD;AAAY,gBAAA,OAAO,EAAC,IAApB;AAAA,uCAEE;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,sBA5BF;AAAA;AAAA;AAAA;AAAA;AAAA;AAPF;AAAA;AAAA;AAAA;AAAA;AADF,WAAmBL,KAAnB;AAAA;AAAA;AAAA;AAAA,gBADF;AAgDD,OAjDA;AADH;AAAA;AAAA;AAAA;AAAA;AAHF;AAwDD,CAzDM;KAAMN,kB","sourcesContent":["import {\n  Typography,\n  Card,\n  GridList,\n  GridListTile,\n  CardContent,\n} from \"@material-ui/core\";\n\n/**\n * This is the component for the queried data portion of our application.\n * It contains a grid of cards which each contain a different issue found in the repo specified.\n *\n * We use a map function to iterate and apply properties/methods to each element of the array.\n * Remember that queriedData is a json! We have an array of jsons within one larger json.\n * Each entry in the json response is a single issue.\n *\n * We iterate through the json array and for each component we create a GridListTile, Card, and CardContent while extracting the properties!\n */\nexport const QueriedDataContent = ({ queriedData }) => {\n  return (\n    // GridList is the parent component wrapping the components within.\n    // We use map function to create the components for each entry.\n    <GridList cols={3} style={{ marginLeft: \"10px\", marginRight: \"10px\" }}>\n      {queriedData.map((mapDatum, index) => {\n        return (\n          <GridListTile key={index}>\n            <Card\n              style={{\n                height: \"200px\",\n                overflowY: \"scroll\",\n                background: \"#ebf7ff\",\n              }}\n            >\n              <CardContent>\n                {/* This is a conditional ternary statement. It checks if the issue is a pull request and is open.\n                If it is, we know that it is a pull request! */}\n                {(mapDatum.pull_request && mapDatum.state !== \"closed\") ||\n                (mapDatum.state === \"open\" && mapDatum.pull_request) ? (\n                  <span>\n                    <Typography>Pull Request</Typography>\n                  </span>\n                ) : // In the case it is not pull request, (first statement is false), we check if the state is closed.\n                // If it is closed, we can mark it as a closed issue\n                mapDatum.state === \"closed\" ? (\n                  <span>\n                    <Typography> Closed</Typography>\n                  </span>\n                ) : (\n                  // else: it means it is neither a pull request or closed issue, so we can just call it an issue.\n                  <span>\n                    <Typography> Issue</Typography>\n                  </span>\n                )}\n\n                {/*  ================================================================================================================================================ */}\n                {/* TODO #14: Add the following properties into the card! (from the API response)\n                    - number\n                    - state\n                    - title \n                */}\n                {/* Note how we can simply access the properties within the json! */}\n                <Typography variant=\"h6\">\n\n                  <br />\n\n                </Typography>\n\n                {/*  ================================================================================================================================================ */}\n              </CardContent>\n            </Card>\n          </GridListTile>\n        );\n      })}\n    </GridList>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}